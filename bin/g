#!/bin/sh
# Copyright (C) 2020 Martin Edstr√∂m

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


# shellcheck source=/home/kept/Dotfiles/.profile

# set -e
# while getopts ":t:" option; do
# case ${option} in
        # t) action=trysource ;;
        # :) action=trysource ;;
        # *) ;;
# esac
# done
#

# Alternative to realpath() that won't resolve to a /gnu/store item because it
# uses pwd(1) instead of traversing symlinks. Good for output messages.
fullpath() {
        echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")" ;
}

trysource() {
        GUIX_PROFILE="$1"
        test -f "$GUIX_PROFILE/etc/profile" &&\
                . "$GUIX_PROFILE/etc/profile" &&\
                echo "Sourced $GUIX_PROFILE"
}

print_help() {
        echo
        echo "  Usage examples: if you have a profile named gtk:"
        echo "    on gtk install icecat"
        echo "    on gtk upgrade"
        echo "    on gtk package --rollback"
        echo "    on gtk sync        (reflect \$EXTRA_PROFILES/gtk.scm)"
        echo "    on all sync        (reflect all manifests)"
        echo "    on active source   (source \$ACTIVE_PROFILES)"
        echo "    on source          (source ~/.guix-profile)"
        echo
}


# Interpret the parameters

if [ $# -eq 0 ]; then
            print_help
            exit
elif [ $# -eq 1 ]; then
            profile="$HOME/.guix-profile"
            command="$1"
            shift
else
        profile="$1"
        shift
        command="$1"
        shift
fi

# Operate on default user profile or a provided directory

if [ "$profile" = "$HOME/.guix-profile" ] || [ -d "$profile" ]; then
        if [ "$command" = "source" ]; then
                trysource "$(fullpath "$profile")"
        # elif [ "$command" = "sync" ]; then
        #             guix package \
        #                     -p "$EXTRA_PROFILES/$profile/$profile" \
        #                     -m "$EXTRA_PROFILES/$profile.scm"
        else
                guix "$command" -p "$profile"
        fi
        exit $?
fi


# Operate on profile(s) in $EXTRA_PROFILES

if [ "$profile" = "active" ]; then
        ARGS=$(echo "$ACTIVE_PROFILES" | grep -Eo "[^[:space:]]+")
elif [ "$profile" = "all" ]; then
        ARGS=$(ls "$EXTRA_PROFILES")
else
        ARGS="$profile"  # Single profile
# TODO: Take more profiles on the command line until a guix subcommand is recognized
# else ${$*#package|install|upgrade}
fi

if [ "$command" = "source" ]; then
        for PROFILE in $ARGS; do
                trysource "$EXTRA_PROFILES/$PROFILE/$PROFILE"
        done
elif [ "$command" = "sync" ]; then
        for PROFILE in $ARGS; do
            guix package \
                    -p "$EXTRA_PROFILES/$PROFILE/$PROFILE" \
                    -m "$EXTRA_PROFILES/$PROFILE.scm"
        done
else
        for PROFILE in $ARGS; do
                guix "$command" -p "$EXTRA_PROFILES/$PROFILE/$PROFILE" "$@"
        done
fi
